name: Release

on:
  push:
    tags:
      - 'v*.*.*'
      - '*.*.*'
      - '*.*.*-rc'
      - '*.*.*-RC'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies for cross-compilation
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libgtk-3-dev libglib2.0-dev libgdk-pixbuf2.0-dev cargo mingw-w64

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          override-file: Cargo.toml

      - name: Add required Rust targets
        run: |
          rustup target add x86_64-pc-windows-gnu
          rustup target add x86_64-unknown-linux-gnu
          rustup target add x86_64-unknown-linux-musl
          rustup target add x86_64-apple-darwin

      - name: Build for native release
        run: cargo build --release

      - name: Build and collect binaries for all platforms
        run: |
          set -e
          echo "***** Preparing to build binaries for all platforms..."
          echo "Current directory: $(pwd)"
          echo "Available targets:"
          rustup target list --installed
          echo "Available toolchains:"
          rustup toolchain list

          echo "***** Create artifacts directory..."
          mkdir -p artifacts

          # Windows
          echo "***** Building for Windows..."
          cargo build --release --target=x86_64-pc-windows-gnu
          if [ -f target/x86_64-pc-windows-gnu/release/image-view.exe ]; then
            cp target/x86_64-pc-windows-gnu/release/image-view.exe artifacts/image-view-windows.exe
          else
            echo "Windows binary not found!" && exit 1
          fi

          # Linux GNU
          echo "***** Building for Linux GNU..."
          cargo build --release --target=x86_64-unknown-linux-gnu
          if [ -f target/x86_64-unknown-linux-gnu/release/image-view ]; then
            cp target/x86_64-unknown-linux-gnu/release/image-view artifacts/image-view-linux
            cp target/x86_64-unknown-linux-gnu/release/image-view artifacts/image-view-deb
            cp target/x86_64-unknown-linux-gnu/release/image-view artifacts/image-view-pacman
            cp target/x86_64-unknown-linux-gnu/release/image-view artifacts/image-view-yum
            cp target/x86_64-unknown-linux-gnu/release/image-view artifacts/image-view-redhat
          else
            echo "Linux GNU binary not found!" && exit 1
          fi

          # Linux MUSL
          echo "***** Building for Linux MUSL..."
          cargo build --release --target=x86_64-unknown-linux-musl
          if [ -f target/x86_64-unknown-linux-musl/release/image-view ]; then
            cp target/x86_64-unknown-linux-musl/release/image-view artifacts/image-view-musl
          else
            echo "Linux MUSL binary not found!" && exit 1
          fi

          # macOS
          echo "***** Building for macOS..."
          if command -v x86_64-apple-darwin-gcc >/dev/null 2>&1; then
            export CARGO_BUILD_TARGET_X86_64_APPLE_DARWIN_LINKER=x86_64-apple-darwin-gcc
            cargo build --release --target=x86_64-apple-darwin
            if [ -f target/x86_64-apple-darwin/release/image-view ]; then
              cp target/x86_64-apple-darwin/release/image-view artifacts/image-view-mac
            else
              echo "!!!!! macOS binary not found!"
            fi
          else
            echo "!!!!! macOS cross-compiler not found, skipping macOS build."
          fi

          echo "***** All binaries built successfully!"

          echo "Binaries are located in the artifacts directory:"
          ls -al artifacts

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: image-view-binaries
          path: artifacts/*
      - name: Create release notes
        id: release_notes
        run: |
          echo "Generating release notes..."
          git log --pretty=format:"* %s" $(git describe --tags --abbrev=0)..HEAD > release_notes.txt
          echo "" >> release_notes.txt
          echo "## Download Binaries" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "| Platform | Binary |" >> release_notes.txt
          echo "|----------|--------|" >> release_notes.txt
          echo "| Windows (.exe) | [image-view-windows.exe](https://github.com/${{ github.repository }}/releases/download/${GITHUB_REF_NAME}/image-view-windows.exe) |" >> release_notes.txt
          echo "| Linux GNU | [image-view-linux](https://github.com/${{ github.repository }}/releases/download/${GITHUB_REF_NAME}/image-view-linux) |" >> release_notes.txt
          echo "| Linux MUSL | [image-view-musl](https://github.com/${{ github.repository }}/releases/download/${GITHUB_REF_NAME}/image-view-musl) |" >> release_notes.txt
          echo "| macOS | [image-view-mac](https://github.com/${{ github.repository }}/releases/download/${GITHUB_REF_NAME}/image-view-mac) |" >> release_notes.txt
          echo "| Debian (.deb) | [image-view-deb](https://github.com/${{ github.repository }}/releases/download/${GITHUB_REF_NAME}/image-view-deb) |" >> release_notes.txt
          echo "| Arch (.pacman) | [image-view-pacman](https://github.com/${{ github.repository }}/releases/download/${GITHUB_REF_NAME}/image-view-pacman) |" >> release_notes.txt
          echo "| Yum (.yum) | [image-view-yum](https://github.com/${{ github.repository }}/releases/download/${GITHUB_REF_NAME}/image-view-yum) |" >> release_notes.txt
          echo "| RedHat | [image-view-redhat](https://github.com/${{ github.repository }}/releases/download/${GITHUB_REF_NAME}/image-view-redhat) |" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "Release notes generated:"
          cat release_notes.txt
          notes_content=$(cat release_notes.txt)
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$notes_content" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ steps.release_notes.outputs.notes }}
          files: artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}